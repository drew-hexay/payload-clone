"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var useSlider_1 = __importDefault(require("../useSlider"));
var getGhostSlideWidth_1 = require("./getGhostSlideWidth");
var SliderTrack = function (props) {
    var _a = props.htmlElement, Tag = _a === void 0 ? 'div' : _a, children = props.children, style = props.style, rest = __rest(props, ["htmlElement", "children", "style"]);
    var sliderContext = (0, useSlider_1.default)();
    var sliderTrackRef = sliderContext.sliderTrackRef, setScrollRatio = sliderContext.setScrollRatio, slideWidth = sliderContext.slideWidth, scrollable = sliderContext.scrollable, scrollSnap = sliderContext.scrollSnap, setIsPaused = sliderContext.setIsPaused, pauseOnHover = sliderContext.pauseOnHover, alignLastSlide = sliderContext.alignLastSlide, isDragging = sliderContext.isDragging, autoPlay = sliderContext.autoPlay, idFromContext = sliderContext.id;
    var hasAddedScrollListener = (0, react_1.useRef)(false);
    var animationFrameID = (0, react_1.useRef)();
    var getScrollRatio = (0, react_1.useCallback)(function () {
        var track = sliderTrackRef.current;
        if (track) {
            var newScrollRatio = track.scrollLeft / (track.scrollWidth - track.clientWidth);
            setScrollRatio(newScrollRatio);
        }
    }, [
        sliderTrackRef,
        setScrollRatio,
    ]);
    var onScroll = (0, react_1.useCallback)(function () {
        var track = sliderTrackRef.current;
        if (track) {
            // prevent compounding events
            if (animationFrameID.current)
                cancelAnimationFrame(animationFrameID.current);
            var requestID = requestAnimationFrame(getScrollRatio);
            animationFrameID.current = requestID;
        }
    }, [
        sliderTrackRef,
        getScrollRatio,
    ]);
    // NOTE: handle updates to the track's current scroll, which could originate from either the user or the program
    (0, react_1.useEffect)(function () {
        var track = sliderTrackRef.current;
        if (track && hasAddedScrollListener.current === false) {
            track.addEventListener('scroll', onScroll, false);
            hasAddedScrollListener.current = true;
        }
        return function () {
            hasAddedScrollListener.current = false;
            if (track) {
                track.removeEventListener('scroll', onScroll);
            }
        };
    }, [
        sliderTrackRef,
        onScroll,
    ]);
    // NOTE: if the user does not want scroll enabled, we need to remove the event listener without canceling programmatic scroll
    (0, react_1.useEffect)(function () {
        var track = sliderTrackRef.current;
        if (track) {
            if (!scrollable) {
                track.addEventListener('wheel', function (e) { e.preventDefault(); });
            }
        }
        return function () {
            if (track) {
                track.removeEventListener('scroll', onScroll);
            }
        };
    }, [
        scrollable,
        onScroll,
        sliderTrackRef
    ]);
    var ghostSlideWidth = (0, getGhostSlideWidth_1.getGhostSlideWidth)(sliderContext);
    var scrollSnapType;
    if (scrollSnap && slideWidth) {
        scrollSnapType = !isDragging ? 'x mandatory' : 'none';
    }
    return (react_1.default.createElement(Tag, __assign({}, __assign(__assign({ 
        // NOTE: the 'aria-controls' attribute of the toggler should match this ID
        id: "slider-track_".concat(idFromContext), 'aria-live': autoPlay ? "polite" : "off" }, rest), { style: __assign({ position: 'relative', display: 'flex', overflowX: 'scroll', WebkitOverflowScrolling: 'touch', 
            // NOTE: only apply after slide width has populated and while NOT dragging
            scrollSnapType: scrollSnapType }, style), ref: sliderTrackRef, onMouseEnter: function () {
            if (pauseOnHover)
                setIsPaused(true);
            // TODO: fire external methods from props, too
        }, onMouseLeave: function () {
            if (pauseOnHover)
                setIsPaused(false);
            // TODO: fire external methods from props, too
        } })),
        children && children,
        alignLastSlide !== undefined && (react_1.default.createElement("div", { style: {
                flexShrink: 0,
                width: ghostSlideWidth,
                pointerEvents: 'none'
            } }, "\u00A0"))));
};
exports.default = SliderTrack;
//# sourceMappingURL=index.js.map