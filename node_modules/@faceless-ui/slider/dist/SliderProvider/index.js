"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var smoothscroll_polyfill_1 = __importDefault(require("smoothscroll-polyfill"));
var context_1 = __importDefault(require("./context"));
var reducer_1 = __importDefault(require("./reducer"));
var useDragScroll_1 = __importDefault(require("./useDragScroll"));
var useBreakpoints_1 = require("./useBreakpoints");
var useMarquee_1 = require("./useMarquee");
var useAutoplay_1 = require("./useAutoplay");
var useScrollToIndex_1 = require("./useScrollToIndex");
var SliderProvider = function (props) {
    var children = props.children, _a = props.currentSlideIndex, slideIndexFromProps = _a === void 0 ? 0 : _a, onSlide = props.onSlide, pause = props.pause, idFromProps = props.id;
    // NOTE: some ARIA attributes rely on matching IDs
    var uniqueID = (0, react_1.useId)();
    var id = idFromProps || uniqueID;
    var settings = (0, useBreakpoints_1.useBreakpoints)(props);
    var _b = settings.slidesToShow, slidesToShow = _b === void 0 ? 3 : _b, slideOnSelect = settings.slideOnSelect, _c = settings.scrollable, scrollableFromProps = _c === void 0 ? true : _c, useFreeScroll = settings.useFreeScroll, dragScroll = settings.dragScroll, scrollSnap = settings.scrollSnap, _d = settings.scrollOffset, scrollOffset = _d === void 0 ? 0 : _d, autoPlay = settings.autoPlay, _e = settings.autoplaySpeed, autoplaySpeed = _e === void 0 ? 2000 : _e, marquee = settings.marquee, marqueeSpeed = settings.marqueeSpeed, _f = settings.pauseOnHover, pauseOnHover = _f === void 0 ? true : _f, alignLastSlide = settings.alignLastSlide;
    if (useFreeScroll !== undefined) {
        console.warn('`useFreeScroll` prop will be deprecated in the next major release, use `scrollable` instead (`true` by default)');
    }
    // NOTE: this this only while `useFreeScroll` is still supported, see warning above
    var scrollable = scrollableFromProps === undefined ? useFreeScroll : scrollableFromProps;
    var _g = (0, react_1.useState)(0), scrollRatio = _g[0], setScrollRatio = _g[1];
    var _h = (0, react_1.useState)(), slideWidth = _h[0], setSlideWidth = _h[1];
    var _j = (0, react_1.useState)(false), isPaused = _j[0], setIsPaused = _j[1];
    var _k = (0, react_1.useState)(false), isFullyScrolled = _k[0], setIsFullyScrolled = _k[1];
    var sliderTrackRef = (0, react_1.useRef)(null);
    var _l = (0, react_1.useState)(false), isDragging = _l[0], setIsDragging = _l[1];
    var _m = (0, react_1.useReducer)(reducer_1.default, {
        currentSlideIndex: slideIndexFromProps,
        selectedSlideIndex: undefined,
        slides: [],
    }), sliderState = _m[0], dispatchSliderState = _m[1];
    (0, useDragScroll_1.default)({
        ref: sliderTrackRef,
        scrollYAxis: false,
        enable: dragScroll || (scrollable && dragScroll !== false),
        onDrag: function () { setIsDragging(true); },
        onDragEnd: function () { setIsDragging(false); },
    });
    (0, useMarquee_1.useMarquee)({
        sliderTrackRef: sliderTrackRef,
        isFullyScrolled: isFullyScrolled,
        isPaused: isPaused,
        enable: marquee && !autoPlay,
        marqueeSpeed: marqueeSpeed
    });
    (0, useAutoplay_1.useAutoplay)({
        sliderTrackRef: sliderTrackRef,
        isFullyScrolled: isFullyScrolled,
        isPaused: isPaused,
        enable: autoPlay,
        autoplaySpeed: autoplaySpeed,
        dispatchSliderState: dispatchSliderState
    });
    (0, useScrollToIndex_1.useScrollToIndex)({
        sliderTrackRef: sliderTrackRef,
        dispatchSliderState: dispatchSliderState,
        onSlide: onSlide,
        scrollOffset: scrollOffset,
        sliderState: sliderState
    });
    var indexFromPropsRef = (0, react_1.useRef)(slideIndexFromProps);
    (0, react_1.useEffect)(function () {
        smoothscroll_polyfill_1.default.polyfill(); // enables scrollTo.behavior: 'smooth' on Safari
    }, []);
    (0, react_1.useEffect)(function () {
        var newSlideWidth = "".concat((slidesToShow > 1 ? 1 / slidesToShow : slidesToShow) * 100, "%");
        setSlideWidth(newSlideWidth);
    }, [
        slidesToShow,
    ]);
    // let user control pause, if they need to
    (0, react_1.useEffect)(function () {
        if (typeof pause !== 'undefined')
            setIsPaused(pause);
    }, [pause]);
    // NOTE: for performance we set another state for 'isFullyScrolled' to avoid using `scrollRatio` directly as callback dependency
    (0, react_1.useEffect)(function () {
        if (scrollRatio === 1)
            setIsFullyScrolled(true);
        else
            setIsFullyScrolled(false);
    }, [scrollRatio]);
    // NOTE: let props control the slider using 'currentSlideIndex' (aliased as 'slideIndexFromProps')
    (0, react_1.useEffect)(function () {
        if (typeof slideIndexFromProps !== 'undefined' && slideIndexFromProps !== indexFromPropsRef.current && slideIndexFromProps !== sliderState.currentSlideIndex) {
            dispatchSliderState({
                type: 'GO_TO_SLIDE_INDEX',
                payload: {
                    index: slideIndexFromProps,
                },
            });
        }
        indexFromPropsRef.current = slideIndexFromProps;
    }, [
        slideIndexFromProps,
        sliderState.currentSlideIndex
    ]);
    var context = __assign(__assign({ sliderTrackRef: sliderTrackRef, scrollRatio: scrollRatio }, sliderState), { setScrollRatio: setScrollRatio, goToNextSlide: function () {
            dispatchSliderState({
                type: 'GO_TO_NEXT_SLIDE',
                payload: {
                    loop: !scrollable,
                },
            });
        }, goToPrevSlide: function () {
            dispatchSliderState({
                type: 'GO_TO_PREV_SLIDE',
                payload: {
                    loop: !scrollable,
                },
            });
        }, goToSlideIndex: function (index) {
            dispatchSliderState({
                type: 'GO_TO_SLIDE_INDEX',
                payload: {
                    index: index,
                }
            });
        }, dispatchSlide: function (slide) {
            dispatchSliderState({
                type: 'UPDATE_SLIDE',
                payload: {
                    slide: slide,
                },
            });
        }, autoPlay: autoPlay, slideWidth: slideWidth, slidesToShow: slidesToShow, slideOnSelect: slideOnSelect, scrollable: scrollable, dragScroll: dragScroll, scrollSnap: scrollSnap, scrollOffset: scrollOffset, setIsPaused: setIsPaused, isPaused: isPaused, pauseOnHover: pauseOnHover, alignLastSlide: alignLastSlide, isDragging: isDragging, id: id });
    return (react_1.default.createElement(context_1.default.Provider, { value: context }, (children && (typeof children === 'function' ? children(__assign({}, context)) : children))));
};
exports.default = SliderProvider;
//# sourceMappingURL=index.js.map