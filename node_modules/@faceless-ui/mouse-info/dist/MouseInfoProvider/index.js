"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var context_1 = __importDefault(require("../MouseInfoProvider/context"));
var reducer = function (state, payload) {
    var e = payload.e, timestamp = payload.timestamp, animationRef = payload.animationRef;
    animationRef.current = null;
    var prevMouseX = state.x, prevMouseY = state.y, prevXDirection = state.xDirection, prevYDirection = state.yDirection, eventsFired = state.eventsFired;
    var currentMouseX = (e === null || e === void 0 ? void 0 : e.clientX) || 0;
    var currentMouseY = (e === null || e === void 0 ? void 0 : e.clientY) || 0;
    var xDifference = currentMouseX - prevMouseX;
    var yDifference = currentMouseY - prevMouseY;
    var xPercentage = (currentMouseX / window.innerWidth) * 100;
    var yPercentage = (currentMouseY / window.innerHeight) * 100;
    var totalPercentage = (xPercentage + yPercentage) / 2;
    var xDirection = xDifference > 0 ? 'right' : xDifference < 0 ? 'left' : prevXDirection; // eslint-disable-line no-nested-ternary
    var yDirection = yDifference > 0 ? 'down' : yDifference < 0 ? 'up' : prevYDirection; // eslint-disable-line no-nested-ternary
    return {
        x: currentMouseX,
        y: currentMouseY,
        xDifference: xDifference,
        yDifference: yDifference,
        xDirection: xDirection,
        yDirection: yDirection,
        xPercentage: xPercentage,
        yPercentage: yPercentage,
        totalPercentage: totalPercentage,
        eventsFired: timestamp ? eventsFired + 1 : eventsFired,
    };
};
var MouseInfoProvider = function (props) {
    var children = props.children;
    var animationRef = (0, react_1.useRef)(null);
    var _a = (0, react_1.useReducer)(reducer, {
        x: 0,
        y: 0,
        xDifference: 0,
        yDifference: 0,
        xDirection: undefined,
        yDirection: undefined,
        xPercentage: 0,
        yPercentage: 0,
        totalPercentage: 0,
        eventsFired: 0,
    }), state = _a[0], dispatch = _a[1];
    var _b = (0, react_1.useState)(undefined), isInViewport = _b[0], setIsInViewport = _b[1];
    var requestAnimation = (0, react_1.useCallback)(function (e) {
        if (animationRef.current)
            cancelAnimationFrame(animationRef.current);
        animationRef.current = requestAnimationFrame(function (timestamp) {
            dispatch({
                e: e,
                timestamp: timestamp,
                animationRef: animationRef,
            });
        });
    }, []);
    var setViewportStatus = (0, react_1.useCallback)(function (status) {
        setIsInViewport(Boolean(status));
    }, []);
    (0, react_1.useEffect)(function () {
        document.addEventListener('mousemove', requestAnimation);
        document.addEventListener('mouseenter', function () { return setViewportStatus(true); });
        document.addEventListener('mouseleave', function () { return setViewportStatus(false); });
        return function () {
            document.removeEventListener('mousemove', requestAnimation);
            document.removeEventListener('mouseenter', function () { return setViewportStatus; });
            document.removeEventListener('mouseleave', function () { return setViewportStatus; });
        };
    }, [
        requestAnimation,
        setViewportStatus,
    ]);
    return (react_1.default.createElement(context_1.default.Provider, { value: __assign(__assign({}, state), { isInViewport: isInViewport }) }, children && children));
};
exports.default = MouseInfoProvider;
//# sourceMappingURL=index.js.map